3.5.2012
     Another MAJOR overhaul. The program is leaner and meaner now.

     All Expressions, Statements, and Dsymbols now inheret from class Dobject.
   This will allow nicer IDE capabilities I believe.
   All the Dobjects are separate from the parser and lexer.

     I did some work on the code generating functions such that they will
   actually print decent looking code. I'm designing a code generation
   facility but I decided to separate it from the objects, hopefully making 
   it just as modular as the lexer and the parser.

     The file names are lowercase again, and they are all in one small 
   directory.
      
     I actually feel pretty good about this commit. Have a look at
   "main.d". Then try this from your shell:

   ddmd-clean$ ./build.sh
   
   Pretty cool, huh?

Next commit: 2.16.2012  :: Getting the parser to run now
    I restructured almost the whole thing. The compile times are WAY down!

First upload: 2.2.2012
ddmd-clean README, by Zach the Mystic
(original notice, a few details follow)

Hi, thanks for reading me.

  The main problem with the ddmd project ( http://www.dsource.org/projects/ddmd )
is that Digital Mars D (dmd), written in C++, is just chock-full of code which
you simply wouldn't write if you were programming it in D.  Therefore you
have things like "alias Vector!Dsymbol Dsymbols;" followed later by "Dsymbols
members;", followed by "members = new Dsymbols;", when in D you would just write
"Dsymbol[] members;" and be on your way.

  ddmd-clean is the seed of a true D language port of the dmd compiler. The
whole class heirarchy is maintained and all the crappy C++ weirdness is gone.
Unfortunately, in order to make it clean, certain "conveniences" had to be
sacrificed. Ummm... I entirely erased all of the semantic analysis and the
backend. Also, even the Lexer and Parser, as they stand, are not written using
cutting edge D/phobos techonology. The Lexer still uses good old-fashioned
C-style pointers, when I'm sure it could be made more elegant and robust (though
probably not any faster!) using phobos Ranges. And the main.d program, a.k.a.
mars.c, has been utterly destroyed by my youth and inexperience! Nonetheless it
seemed like it would have been better had it been written in D/phobos anyway.
Since all I needed were the Lexer and Parser I wasn't too worried about what I
might do to main.d.

  Anyway, I chose to put this stripped-down version of the ddmd lexer and parser
on github now since I had lofty ideas about my own program which would require my
changing the basic structure of the Lexer and Parser themselves. (Feb. 2, 2012).
I hope there's something here that you can use.

  Peace,
  Zach

(details)
These are the changes I've made so far. (2.2.2012)

Step 1. Remove "import dmd.TObject;" and "class XXXX [: TObject]" and "register();"
    from all files in which I find them.
    
Step 2. 
    Search files for the pattern
    "TOK\." and erase it in all instances because it's redundant.
    Replace import "dmd.TOK" with "dmd.Token".
    All of dmd.TOK is now in dmd.Token

Step 3. 
    Useless dmd tools:
        dmd.File; // std.stdio
        dmd.Array; // built into language
        dmd.StringTable; // built-into language
        dmd.OutBuffer; // std.array.appender
        dmd.ObjModule; // backend stuff.. need?
        dmd.String; // built-in
        dmd.FileName; // std.file
        dmd.StringValue; // built-in
        dmd.String; // built-in
        !!! dmd.Util  // actually useful for errors and warnings,
        !!! // also finds inifile, but phobos would do it better than that
    
    dmd.OutBuffer has a phobos implementation which I found, called
    std.array.appender. Change all OutBuffers to array.appender!string.
    This will take some work. 
		change "OutBuffer buf = new OutBuffer();"
            "buf.writestring(pid.toChars());"
				"buf.writeByte('.');"
		      "buf.writeByte(0);"
      to : "auto buf = appender!(char[])();"
            "buf.put(pid.toChars());"
				"buf.put('.');"
				"buf.put('\0');"

Step 4. 
    dmd.common seems stupid. Erase all traces.
    Note: I'm trying to imagine ddmd as if it were programmed in
    the *D* Programming Language. Therefore I'm rejecting ugly hacks.
    Plus, I have a scheme for how ddmd can be developed organically.

Step 5. 
    dmd.File is a crappy way to deal with files. std.stdio and
    std.file are superior. Erase all traces.

Step 6. 
    dmd.Array, dmd.String are BUILT-IN, for christ's sake. Exorcise
    them. Also built-in are StringTable, XXXTable, XXXArray. Convert
    them.

Step 7. 
    Okay, the scheme for incremental development. Start with the lexer
    and parser, which require access only to the constructors of all
    those objects it creates. Therefore, apply changes 1 through 7
    to these modules first. Let them be free, free at last of their
    ties to the past.

Step 8.
    Figure out if the various enum lists can't go into one place.
    Romave the tags off the enums. alias int ENUMNAME their definitions,
    and strip ENUMNAME.ENUMNAMEenumval of its redundant header in
    all files where it is encountered.

Step 9.
    Remove the ridiculous dmd.EnumUtils. It's just the wrong way to
    port dmd to ddmd... well, once step 8 has been accomplished for
    all enums... could take some time.


Step 10. 
    Disable all code which I don't need. This includes semantic 
    analysis, for now. Therefore whenever I can't proceed, comment 
    it out, but don't erase it because it might come in handy someday!

Step 11. 
    Repair damage done to already erased code in non-critical 
    modules when I find it, possibly by copying from the ddmd 
    backup and running the above edits on it. I kind of went 
    maverick on this stuff at first. And I'm not even sure what
    I cut from some of the files. I took out the back end on a 
    lot of them entirely. Just because I'm not going to use the
    backend doesn't mean I should have stripped it bare. I'll
    probably have to pay the price for this by replacing all 
    modules I didn't already edit severely with originals from
    ddmd.

Step 12. 
    Educate yourself in how the build script works, and decide
    what parts of it will come in handy for you. Pare it down to
    what you really need, but keep the old code. Just use it as a
    reference. Learn more about build scripts generally.

Step 13.
    Rearrange all them damn files into a sane package, with folders
    and subdirectories. Rename all the imports in the files to 
    correspond with the new scheme.
    This is a feature I'd like to make automatic in my own editor, 
    and it's probably automatic in most IDEs, so it's not really
    too big a deal.

Step 14. 
    Modules erased:
    dmd.Utf
    dmd.Dchar
    ...

Step 15.
    Enums I changed:
    DYNCAST
    TY
    TOK
    BE
    MOD
    STC : ulong
    TRUST
    PASS
    ParseStatementFlags

Step 16.
    I only support DMDV2. Axe DMDV1 and get rid of version(DMDV2)
    Also, I don't support GCC code at all. Get rid of all of it.

Step 17.
    How does my stripped-down code connect with the nonstripped
    modules I have to import for their constructors?

Step... Well, this is as far as I've gotten.

