
// This file was generated by running genIds.d
// and it gets imported as a mixin(import"Id.txt") by dmd.identifier.
struct Id
{
    static Identifier IUnknown;
static Identifier Object_;
static Identifier max;
static Identifier min;
static Identifier This;
static Identifier ctor;
static Identifier dtor;
static Identifier cpctor;
static Identifier _postblit;
static Identifier classInvariant;
static Identifier unitTest;
static Identifier require;
static Identifier ensure;
static Identifier init_;
static Identifier size;
static Identifier __sizeof;
static Identifier alignof_;
static Identifier mangleof_;
static Identifier stringof_;
static Identifier tupleof_;
static Identifier length;
static Identifier remove;
static Identifier ptr;
static Identifier funcptr;
static Identifier dollar;
static Identifier ctfe;
static Identifier offset;
static Identifier offsetof;
static Identifier ModuleInfo;
static Identifier ClassInfo;
static Identifier classinfo_;
static Identifier typeinfo_;
static Identifier outer;
static Identifier Exception;
static Identifier AssociativeArray;
static Identifier Throwable;
static Identifier withSym;
static Identifier result;
static Identifier returnLabel;
static Identifier delegate_;
static Identifier line;
static Identifier empty;
static Identifier p;
static Identifier coverage;
static Identifier __vptr;
static Identifier __monitor;
static Identifier TypeInfo;
static Identifier TypeInfo_Class;
static Identifier TypeInfo_Interface;
static Identifier TypeInfo_Struct;
static Identifier TypeInfo_Enum;
static Identifier TypeInfo_Typedef;
static Identifier TypeInfo_Pointer;
static Identifier TypeInfo_Array;
static Identifier TypeInfo_StaticArray;
static Identifier TypeInfo_AssociativeArray;
static Identifier TypeInfo_Function;
static Identifier TypeInfo_Delegate;
static Identifier TypeInfo_Tuple;
static Identifier TypeInfo_Const;
static Identifier TypeInfo_Invariant;
static Identifier TypeInfo_Shared;
static Identifier TypeInfo_Wild;
static Identifier elements;
static Identifier _arguments_typeinfo;
static Identifier _arguments;
static Identifier _argptr;
static Identifier _match;
static Identifier destroy;
static Identifier LINE;
static Identifier FILE;
static Identifier DATE;
static Identifier TIME;
static Identifier TIMESTAMP;
static Identifier VENDOR;
static Identifier VERSIONX;
static Identifier EOFX;
static Identifier nan;
static Identifier infinity;
static Identifier dig;
static Identifier epsilon;
static Identifier mant_dig;
static Identifier max_10_exp;
static Identifier max_exp;
static Identifier min_10_exp;
static Identifier min_exp;
static Identifier min_normal;
static Identifier re;
static Identifier im;
static Identifier C;
static Identifier D;
static Identifier Windows;
static Identifier Pascal;
static Identifier System;
static Identifier exit;
static Identifier success;
static Identifier failure;
static Identifier keys;
static Identifier values;
static Identifier rehash;
static Identifier sort;
static Identifier reverse;
static Identifier dup;
static Identifier idup;
static Identifier property;
static Identifier safe;
static Identifier trusted;
static Identifier system;
static Identifier disable;
static Identifier ___out;
static Identifier ___in;
static Identifier __int;
static Identifier __dollar;
static Identifier __LOCAL_SIZE;
static Identifier uadd;
static Identifier neg;
static Identifier com;
static Identifier add;
static Identifier add_r;
static Identifier sub;
static Identifier sub_r;
static Identifier mul;
static Identifier mul_r;
static Identifier div;
static Identifier div_r;
static Identifier mod;
static Identifier mod_r;
static Identifier eq;
static Identifier cmp;
static Identifier iand;
static Identifier iand_r;
static Identifier ior;
static Identifier ior_r;
static Identifier ixor;
static Identifier ixor_r;
static Identifier shl;
static Identifier shl_r;
static Identifier shr;
static Identifier shr_r;
static Identifier ushr;
static Identifier ushr_r;
static Identifier cat;
static Identifier cat_r;
static Identifier assign;
static Identifier addass;
static Identifier subass;
static Identifier mulass;
static Identifier divass;
static Identifier modass;
static Identifier andass;
static Identifier orass;
static Identifier xorass;
static Identifier shlass;
static Identifier shrass;
static Identifier ushrass;
static Identifier catass;
static Identifier postinc;
static Identifier postdec;
static Identifier index;
static Identifier indexass;
static Identifier slice;
static Identifier sliceass;
static Identifier call;
static Identifier cast_;
static Identifier match;
static Identifier next;
static Identifier opIn;
static Identifier opIn_r;
static Identifier opStar;
static Identifier opDot;
static Identifier opDispatch;
static Identifier opImplicitCast;
static Identifier pow;
static Identifier pow_r;
static Identifier powass;
static Identifier classNew;
static Identifier classDelete;
static Identifier apply;
static Identifier applyReverse;
static Identifier Fempty;
static Identifier Fhead;
static Identifier Ftoe;
static Identifier Fnext;
static Identifier Fretreat;
static Identifier adDup;
static Identifier adReverse;
static Identifier aaLen;
static Identifier aaKeys;
static Identifier aaValues;
static Identifier aaRehash;
static Identifier monitorenter;
static Identifier monitorexit;
static Identifier criticalenter;
static Identifier criticalexit;
static Identifier GNU_asm;
static Identifier lib;
static Identifier msg;
static Identifier startaddress;
static Identifier tohash;
static Identifier tostring;
static Identifier getmembers;
static Identifier alloca;
static Identifier main;
static Identifier WinMain;
static Identifier DllMain;
static Identifier tls_get_addr;
static Identifier std;
static Identifier math;
static Identifier sin;
static Identifier cos;
static Identifier tan;
static Identifier _sqrt;
static Identifier _pow;
static Identifier fabs;
static Identifier isAbstractClass;
static Identifier isArithmetic;
static Identifier isAssociativeArray;
static Identifier isFinalClass;
static Identifier isFloating;
static Identifier isIntegral;
static Identifier isScalar;
static Identifier isStaticArray;
static Identifier isUnsigned;
static Identifier isVirtualFunction;
static Identifier isAbstractFunction;
static Identifier isFinalFunction;
static Identifier isStaticFunction;
static Identifier isRef;
static Identifier isOut;
static Identifier isLazy;
static Identifier hasMember;
static Identifier identifier;
static Identifier getMember;
static Identifier getOverloads;
static Identifier getVirtualFunctions;
static Identifier classInstanceSize;
static Identifier allMembers;
static Identifier derivedMembers;
static Identifier isSame;
static Identifier compiles;

    
    static void initIdentifiers()
    {
        	IUnknown = Identifier.idPool("IUnknown");
	Object_ = Identifier.idPool("Object");
	max = Identifier.idPool("max");
	min = Identifier.idPool("min");
	This = Identifier.idPool("this");
	ctor = Identifier.idPool("__ctor");
	dtor = Identifier.idPool("__dtor");
	cpctor = Identifier.idPool("__cpctor");
	_postblit = Identifier.idPool("__postblit");
	classInvariant = Identifier.idPool("__invariant");
	unitTest = Identifier.idPool("__unitTest");
	require = Identifier.idPool("__require");
	ensure = Identifier.idPool("__ensure");
	init_ = Identifier.idPool("init");
	size = Identifier.idPool("size");
	__sizeof = Identifier.idPool("sizeof");
	alignof_ = Identifier.idPool("alignof");
	mangleof_ = Identifier.idPool("mangleof");
	stringof_ = Identifier.idPool("stringof");
	tupleof_ = Identifier.idPool("tupleof");
	length = Identifier.idPool("length");
	remove = Identifier.idPool("remove");
	ptr = Identifier.idPool("ptr");
	funcptr = Identifier.idPool("funcptr");
	dollar = Identifier.idPool("__dollar");
	ctfe = Identifier.idPool("__ctfe");
	offset = Identifier.idPool("offset");
	offsetof = Identifier.idPool("offsetof");
	ModuleInfo = Identifier.idPool("ModuleInfo");
	ClassInfo = Identifier.idPool("ClassInfo");
	classinfo_ = Identifier.idPool("classinfo");
	typeinfo_ = Identifier.idPool("typeinfo");
	outer = Identifier.idPool("outer");
	Exception = Identifier.idPool("Exception");
	AssociativeArray = Identifier.idPool("AssociativeArray");
	Throwable = Identifier.idPool("Throwable");
	withSym = Identifier.idPool("__withSym");
	result = Identifier.idPool("__result");
	returnLabel = Identifier.idPool("__returnLabel");
	delegate_ = Identifier.idPool("delegate");
	line = Identifier.idPool("line");
	empty = Identifier.idPool("");
	p = Identifier.idPool("p");
	coverage = Identifier.idPool("__coverage");
	__vptr = Identifier.idPool("__vptr");
	__monitor = Identifier.idPool("__monitor");
	TypeInfo = Identifier.idPool("TypeInfo");
	TypeInfo_Class = Identifier.idPool("TypeInfo_Class");
	TypeInfo_Interface = Identifier.idPool("TypeInfo_Interface");
	TypeInfo_Struct = Identifier.idPool("TypeInfo_Struct");
	TypeInfo_Enum = Identifier.idPool("TypeInfo_Enum");
	TypeInfo_Typedef = Identifier.idPool("TypeInfo_Typedef");
	TypeInfo_Pointer = Identifier.idPool("TypeInfo_Pointer");
	TypeInfo_Array = Identifier.idPool("TypeInfo_Array");
	TypeInfo_StaticArray = Identifier.idPool("TypeInfo_StaticArray");
	TypeInfo_AssociativeArray = Identifier.idPool("TypeInfo_AssociativeArray");
	TypeInfo_Function = Identifier.idPool("TypeInfo_Function");
	TypeInfo_Delegate = Identifier.idPool("TypeInfo_Delegate");
	TypeInfo_Tuple = Identifier.idPool("TypeInfo_Tuple");
	TypeInfo_Const = Identifier.idPool("TypeInfo_Const");
	TypeInfo_Invariant = Identifier.idPool("TypeInfo_Invariant");
	TypeInfo_Shared = Identifier.idPool("TypeInfo_Shared");
	TypeInfo_Wild = Identifier.idPool("TypeInfo_Inout");
	elements = Identifier.idPool("elements");
	_arguments_typeinfo = Identifier.idPool("_arguments_typeinfo");
	_arguments = Identifier.idPool("_arguments");
	_argptr = Identifier.idPool("_argptr");
	_match = Identifier.idPool("_match");
	destroy = Identifier.idPool("destroy");
	LINE = Identifier.idPool("__LINE__");
	FILE = Identifier.idPool("__FILE__");
	DATE = Identifier.idPool("__DATE__");
	TIME = Identifier.idPool("__TIME__");
	TIMESTAMP = Identifier.idPool("__TIMESTAMP__");
	VENDOR = Identifier.idPool("__VENDOR__");
	VERSIONX = Identifier.idPool("__VERSION__");
	EOFX = Identifier.idPool("__EOF__");
	nan = Identifier.idPool("nan");
	infinity = Identifier.idPool("infinity");
	dig = Identifier.idPool("dig");
	epsilon = Identifier.idPool("epsilon");
	mant_dig = Identifier.idPool("mant_dig");
	max_10_exp = Identifier.idPool("max_10_exp");
	max_exp = Identifier.idPool("max_exp");
	min_10_exp = Identifier.idPool("min_10_exp");
	min_exp = Identifier.idPool("min_exp");
	min_normal = Identifier.idPool("min_normal");
	re = Identifier.idPool("re");
	im = Identifier.idPool("im");
	C = Identifier.idPool("C");
	D = Identifier.idPool("D");
	Windows = Identifier.idPool("Windows");
	Pascal = Identifier.idPool("Pascal");
	System = Identifier.idPool("System");
	exit = Identifier.idPool("exit");
	success = Identifier.idPool("success");
	failure = Identifier.idPool("failure");
	keys = Identifier.idPool("keys");
	values = Identifier.idPool("values");
	rehash = Identifier.idPool("rehash");
	sort = Identifier.idPool("sort");
	reverse = Identifier.idPool("reverse");
	dup = Identifier.idPool("dup");
	idup = Identifier.idPool("idup");
	property = Identifier.idPool("property");
	safe = Identifier.idPool("safe");
	trusted = Identifier.idPool("trusted");
	system = Identifier.idPool("system");
	disable = Identifier.idPool("disable");
	___out = Identifier.idPool("out");
	___in = Identifier.idPool("in");
	__int = Identifier.idPool("int");
	__dollar = Identifier.idPool("$");
	__LOCAL_SIZE = Identifier.idPool("__LOCAL_SIZE");
	uadd = Identifier.idPool("opPos");
	neg = Identifier.idPool("opNeg");
	com = Identifier.idPool("opCom");
	add = Identifier.idPool("opAdd");
	add_r = Identifier.idPool("opAdd_r");
	sub = Identifier.idPool("opSub");
	sub_r = Identifier.idPool("opSub_r");
	mul = Identifier.idPool("opMul");
	mul_r = Identifier.idPool("opMul_r");
	div = Identifier.idPool("opDiv");
	div_r = Identifier.idPool("opDiv_r");
	mod = Identifier.idPool("opMod");
	mod_r = Identifier.idPool("opMod_r");
	eq = Identifier.idPool("opEquals");
	cmp = Identifier.idPool("opCmp");
	iand = Identifier.idPool("opAnd");
	iand_r = Identifier.idPool("opAnd_r");
	ior = Identifier.idPool("opOr");
	ior_r = Identifier.idPool("opOr_r");
	ixor = Identifier.idPool("opXor");
	ixor_r = Identifier.idPool("opXor_r");
	shl = Identifier.idPool("opShl");
	shl_r = Identifier.idPool("opShl_r");
	shr = Identifier.idPool("opShr");
	shr_r = Identifier.idPool("opShr_r");
	ushr = Identifier.idPool("opUShr");
	ushr_r = Identifier.idPool("opUShr_r");
	cat = Identifier.idPool("opCat");
	cat_r = Identifier.idPool("opCat_r");
	assign = Identifier.idPool("opAssign");
	addass = Identifier.idPool("opAddAssign");
	subass = Identifier.idPool("opSubAssign");
	mulass = Identifier.idPool("opMulAssign");
	divass = Identifier.idPool("opDivAssign");
	modass = Identifier.idPool("opModAssign");
	andass = Identifier.idPool("opAndAssign");
	orass = Identifier.idPool("opOrAssign");
	xorass = Identifier.idPool("opXorAssign");
	shlass = Identifier.idPool("opShlAssign");
	shrass = Identifier.idPool("opShrAssign");
	ushrass = Identifier.idPool("opUShrAssign");
	catass = Identifier.idPool("opCatAssign");
	postinc = Identifier.idPool("opPostInc");
	postdec = Identifier.idPool("opPostDec");
	index = Identifier.idPool("opIndex");
	indexass = Identifier.idPool("opIndexAssign");
	slice = Identifier.idPool("opSlice");
	sliceass = Identifier.idPool("opSliceAssign");
	call = Identifier.idPool("opCall");
	cast_ = Identifier.idPool("opCast");
	match = Identifier.idPool("opMatch");
	next = Identifier.idPool("opNext");
	opIn = Identifier.idPool("opIn");
	opIn_r = Identifier.idPool("opIn_r");
	opStar = Identifier.idPool("opStar");
	opDot = Identifier.idPool("opDot");
	opDispatch = Identifier.idPool("opDispatch");
	opImplicitCast = Identifier.idPool("opImplicitCast");
	pow = Identifier.idPool("opPow");
	pow_r = Identifier.idPool("opPow_r");
	powass = Identifier.idPool("opPowAssign");
	classNew = Identifier.idPool("new");
	classDelete = Identifier.idPool("delete");
	apply = Identifier.idPool("opApply");
	applyReverse = Identifier.idPool("opApplyReverse");
	Fempty = Identifier.idPool("empty");
	Fhead = Identifier.idPool("front");
	Ftoe = Identifier.idPool("back");
	Fnext = Identifier.idPool("popFront");
	Fretreat = Identifier.idPool("popBack");
	adDup = Identifier.idPool("_adDupT");
	adReverse = Identifier.idPool("_adReverse");
	aaLen = Identifier.idPool("_aaLen");
	aaKeys = Identifier.idPool("_aaKeys");
	aaValues = Identifier.idPool("_aaValues");
	aaRehash = Identifier.idPool("_aaRehash");
	monitorenter = Identifier.idPool("_d_monitorenter");
	monitorexit = Identifier.idPool("_d_monitorexit");
	criticalenter = Identifier.idPool("_d_criticalenter");
	criticalexit = Identifier.idPool("_d_criticalexit");
	GNU_asm = Identifier.idPool("GNU_asm");
	lib = Identifier.idPool("lib");
	msg = Identifier.idPool("msg");
	startaddress = Identifier.idPool("startaddress");
	tohash = Identifier.idPool("toHash");
	tostring = Identifier.idPool("toString");
	getmembers = Identifier.idPool("getMembers");
	alloca = Identifier.idPool("alloca");
	main = Identifier.idPool("main");
	WinMain = Identifier.idPool("WinMain");
	DllMain = Identifier.idPool("DllMain");
	tls_get_addr = Identifier.idPool("___tls_get_addr");
	std = Identifier.idPool("std");
	math = Identifier.idPool("math");
	sin = Identifier.idPool("sin");
	cos = Identifier.idPool("cos");
	tan = Identifier.idPool("tan");
	_sqrt = Identifier.idPool("sqrt");
	_pow = Identifier.idPool("pow");
	fabs = Identifier.idPool("fabs");
	isAbstractClass = Identifier.idPool("isAbstractClass");
	isArithmetic = Identifier.idPool("isArithmetic");
	isAssociativeArray = Identifier.idPool("isAssociativeArray");
	isFinalClass = Identifier.idPool("isFinalClass");
	isFloating = Identifier.idPool("isFloating");
	isIntegral = Identifier.idPool("isIntegral");
	isScalar = Identifier.idPool("isScalar");
	isStaticArray = Identifier.idPool("isStaticArray");
	isUnsigned = Identifier.idPool("isUnsigned");
	isVirtualFunction = Identifier.idPool("isVirtualFunction");
	isAbstractFunction = Identifier.idPool("isAbstractFunction");
	isFinalFunction = Identifier.idPool("isFinalFunction");
	isStaticFunction = Identifier.idPool("isStaticFunction");
	isRef = Identifier.idPool("isRef");
	isOut = Identifier.idPool("isOut");
	isLazy = Identifier.idPool("isLazy");
	hasMember = Identifier.idPool("hasMember");
	identifier = Identifier.idPool("identifier");
	getMember = Identifier.idPool("getMember");
	getOverloads = Identifier.idPool("getOverloads");
	getVirtualFunctions = Identifier.idPool("getVirtualFunctions");
	classInstanceSize = Identifier.idPool("classInstanceSize");
	allMembers = Identifier.idPool("allMembers");
	derivedMembers = Identifier.idPool("derivedMembers");
	isSame = Identifier.idPool("isSame");
	compiles = Identifier.idPool("compiles");

    }
}
