module dmd.types.TypeClass;

import dmd.Global;
import std.format;

import dmd.Type;
import dmd.ScopeDsymbol;
import dmd.types.TypeInstance;
import dmd.Dsymbol;
import dmd.Scope;
import dmd.HdrGenState;
import std.array;
import dmd.Expression;
import dmd.Identifier;
import dmd.TypeInfoDeclaration;
import dmd.types.TypePointer;
import dmd.Declaration;
import dmd.VarDeclaration;
import dmd.Token;


import std.string : toStringz;


class TypeClass : Type
{
    ClassDeclaration sym;

    this(ClassDeclaration sym)
	{
		super(Tclass);
		this.sym = sym;
	}

    override ulong size(Loc loc)
	{
		return PTRSIZE;
	}
	
    override string toChars()
	{
		if (mod)
			return Type.toChars();
		return sym.toPrettyChars();
	}
	
    override Type syntaxCopy()
	{
		assert(false);
	}
	
	
	
    override void toDecoBuffer(ref Appender!(char[]) buf, int flag)
	{
		string name = sym.mangle();
		//printf("TypeClass.toDecoBuffer('%s' flag=%d mod=%x) = '%s'\n", toChars(), flag, mod, name);
		Type.toDecoBuffer(buf, flag);
		formattedWrite(buf,"%s", name);
	}
	
    override void toCBuffer2(ref Appender!(char[]) buf, ref HdrGenState hgs, MOD mod)
	{
		if (mod != this.mod)
		{	
			toCBuffer3(buf, hgs, mod);
			return;
		}
		buf.put(sym.toChars());
	}

	
    override ClassDeclaration isClassHandle()
	{
		return sym;
	}
	
    override bool isBaseOf(Type t, int* poffset)
    {
        assert (false);
    }	
	
	
	
	
    override bool isauto()
	{
		return sym.isauto;
	}
	
    override bool checkBoolean()
	{
		return true;
	}
	
    override TypeInfoDeclaration getTypeInfoDeclaration()
	{
		if (sym.isInterfaceDeclaration())
			return new TypeInfoInterfaceDeclaration(this);
		else
			return new TypeInfoClassDeclaration(this);
	}
	
	
    override bool builtinTypeInfo()
	{
		/* This is statically put out with the ClassInfo, so
		 * claim it is built in so it isn't regenerated by each module.
		 */
		return mod ? false : true;
	}
	

	
}
